USE ALMACEN;
-- Creación de la tabla Personas
CREATE TABLE Personas (
  id_persona INT PRIMARY KEY,
  nombre VARCHAR(50),
  apellido_paterno VARCHAR(50),
  apellido_materno VARCHAR(50),
  direccion VARCHAR(100),
  telefono INT
);

-- Creación de la tabla Empleados
CREATE TABLE Empleados (
  id_empleado INT PRIMARY KEY,
  id_persona INT,
  FOREIGN KEY (id_persona) REFERENCES Personas(id_persona)
);

-- Creación de la tabla Roles
CREATE TABLE Roles (
  id_rol INT PRIMARY KEY,
  nombre_rol VARCHAR(50)
);

-- Creación de la tabla Empleado Rol
CREATE TABLE Empleado_Rol (
  id_empleadoRol INT PRIMARY KEY,
  id_empleado INT,
  id_rol INT,
  FOREIGN KEY (id_empleado) REFERENCES Empleados(id_empleado),
  FOREIGN KEY (id_rol) REFERENCES Roles(id_rol)
);

-- Creación de la tabla Clientes
CREATE TABLE Clientes (
  id_cliente INT PRIMARY KEY,
  id_persona INT,
  email VARCHAR(50),
  FOREIGN KEY (id_persona) REFERENCES Personas(id_persona)
);

-- Creación de la tabla Estaciones Policiales
CREATE TABLE Estaciones_Policiales (
  id_estacionPolicial INT PRIMARY KEY,
  nombre VARCHAR(50),
  direccion VARCHAR(100),
  telefono INT
);

-- Creación de la tabla Periodos
CREATE TABLE Periodos (
  id_periodo INT PRIMARY KEY,
  gestion INT,
  trimestre INT
);

-- Creación de la tabla Provisiones
CREATE TABLE Provisiones (
  id_provision INT PRIMARY KEY,
  id_estacionPolicial INT,
  id_periodo INT,
  fecha DATE,
  FOREIGN KEY (id_estacionPolicial) REFERENCES Estaciones_Policiales(id_estacionPolicial),
  FOREIGN KEY (id_periodo) REFERENCES Periodos(id_periodo)
);

-- Creación de la tabla Empleados Provisiones
CREATE TABLE Empleados_Provisiones (
  id_empleadoProvision INT PRIMARY KEY,
  id_empleado INT,
  id_provision INT,
  FOREIGN KEY (id_empleado) REFERENCES Empleados(id_empleado),
  FOREIGN KEY (id_provision) REFERENCES Provisiones(id_provision)
);

-- Creación de la tabla Clientes Provisiones
CREATE TABLE Clientes_Provisiones (
  id_clienteProvision INT PRIMARY KEY,
  id_cliente INT,
  id_provision INT,
  FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente),
  FOREIGN KEY (id_provision) REFERENCES Provisiones(id_provision)
);

-- Creación de la tabla Alimentos
CREATE TABLE Alimentos (
  id_alimento INT PRIMARY KEY,
  nombre VARCHAR(50),
  descripcion VARCHAR(100),
  precio DECIMAL(10, 2)
);

-- Creación de la tabla Proveedores
CREATE TABLE Proveedores (
  id_proveedor INT PRIMARY KEY,
  nombre VARCHAR(50),
  direccion VARCHAR(100),
  telefono INT 
);

-- Creación de la tabla Provisones Detalles
CREATE TABLE Provisiones_Detalles (
  id_detalle INT PRIMARY KEY,
  id_provision INT,
  id_alimento INT,
  cantidad INT,
  FOREIGN KEY (id_provision) REFERENCES Provisiones(id_provision),
  FOREIGN KEY (id_alimento) REFERENCES Alimentos(id_alimento)
);

-- Creación de la tabla Alimentos Proveedores
CREATE TABLE Alimentos_Proveedores (
  id_alimentoProveedor INT PRIMARY KEY,
  id_alimento INT,
  id_proveedor INT,
  FOREIGN KEY (id_alimento) REFERENCES Alimentos(id_alimento),
  FOREIGN KEY (id_proveedor) REFERENCES Proveedores(id_proveedor)
);

-- INSERTS
INSERT INTO Personas VALUES (1, 'Juan', 'Perez', 'Garcia', 'Av. America #123', 1234567);
INSERT INTO Personas VALUES (2, 'Maria', 'Garcia', 'Perez', 'Av. America #123', 1234567);
INSERT INTO Personas VALUES (3, 'Pedro', 'Garcia', 'Perez', 'Av. America #123', 1234567);
INSERT INTO Personas VALUES (4, 'Jose', 'Garcia', 'Perez', 'Av. America #123', 1234567);

INSERT INTO Empleados VALUES (1, 1);
INSERT INTO Empleados VALUES (2, 2);

INSERT INTO Roles VALUES (1, 'Administrador');
INSERT INTO Roles VALUES (2, 'Cajero');

INSERT INTO Empleado_Rol VALUES (1, 1, 1);
INSERT INTO Empleado_Rol VALUES (2, 2, 2);

INSERT INTO Clientes VALUES (1, 3, 'camila@gmail.com');
INSERT INTO Clientes VALUES (2, 4, 'alejandra@gmail.com');

INSERT INTO Estaciones_Policiales VALUES (1, 'Estacion Policial 1', 'Av. America #123', 1234567);
INSERT INTO Estaciones_Policiales VALUES (2, 'Estacion Policial 2', 'Av. America #123', 1234567);

INSERT INTO Periodos VALUES (1, 2020, 1);
INSERT INTO Periodos VALUES (2, 2020, 2);

INSERT INTO Provisiones VALUES (1, 1, 1, '2020-01-01');
INSERT INTO Provisiones VALUES (2, 2, 2, '2020-01-01');

INSERT INTO Empleados_Provisiones VALUES (1, 1, 1);
INSERT INTO Empleados_Provisiones VALUES (2, 2, 2);

INSERT INTO Clientes_Provisiones VALUES (1, 1, 1);
INSERT INTO Clientes_Provisiones VALUES (2, 2, 2);

INSERT INTO Alimentos VALUES (1, 'Arroz', 'Arroz blanco', 10.00);
INSERT INTO Alimentos VALUES (2, 'Fideo', 'Fideo blanco', 10.00);

INSERT INTO Proveedores VALUES (1, 'Proveedor 1', 'Av. America #123', 1234567);
INSERT INTO Proveedores VALUES (2, 'Proveedor 2', 'Av. America #123', 1234567);

INSERT INTO Provisiones_Detalles VALUES (1, 1, 1, 10);
INSERT INTO Provisiones_Detalles VALUES (2, 2, 2, 10);

INSERT INTO Alimentos_Proveedores VALUES (1, 1, 1);
INSERT INTO Alimentos_Proveedores VALUES (2, 2, 2);

-- Creación de la tabla Auditoria_Personas
CREATE TABLE Auditoria_Personas (
  id_auditoria INT PRIMARY KEY AUTO_INCREMENT,
  fecha_hora DATETIME,
  accion VARCHAR(50)
);

CREATE TABLE Auditoria_Provisiones (
  id_auditoria INT PRIMARY KEY AUTO_INCREMENT,
  fecha_hora DATETIME,
  accion VARCHAR(50)
);

CREATE TABLE Auditoria_Alimentos (
  id_auditoria INT PRIMARY KEY AUTO_INCREMENT,
  fecha_hora DATETIME,
  accion VARCHAR(50)
);

CREATE TABLE Auditoria_Proveedores (
  id_auditoria INT PRIMARY KEY AUTO_INCREMENT,
  fecha_hora DATETIME,
  accion VARCHAR(50)
);

CREATE TABLE Auditoria_Estaciones_Policiales (
  id_auditoria INT PRIMARY KEY AUTO_INCREMENT,
  fecha_hora DATETIME,
  accion VARCHAR(50)
);


DELIMITER $$
-- Creación del trigger
CREATE TRIGGER calcular_total_provision
AFTER INSERT ON Provisiones_Detalles
FOR EACH ROW
BEGIN
  DECLARE total DECIMAL(10, 2);
  
  -- Obtener el total de la provisión
  SELECT SUM(precio * cantidad) INTO total
  FROM Alimentos
  INNER JOIN Provisiones_Detalles ON Alimentos.id_alimento = Provisiones_Detalles.id_alimento
  WHERE Provisiones_Detalles.id_provision = NEW.id_provision;
  
  -- Actualizar el total de la provisión en la tabla Provisiones
  UPDATE Provisiones
  SET total = total + total
  WHERE id_provision = NEW.id_provision;
END;
$$
DELIMITER ;

-- lo que hace el trigger de arriba es que cada vez que se inserte un nuevo detalle de provisión, se actualiza el total de la provisión en la tabla Provisiones
-- esto se hace con el fin de que no se tenga que calcular el total de la provisión cada vez que se quiera obtener el total de una provisión
